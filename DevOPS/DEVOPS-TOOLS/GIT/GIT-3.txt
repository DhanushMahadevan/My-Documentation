FUNNIEST NOTE :) :
WE WON'T USE MERGE LIKE CMDS MAJORLY, THOSE CMDS ARE USED BY DEV. BUT IT IS NOT A MISTAKE TO LEARN Basic of MERGE cmd.

BASIC NOTE:
 MAJOR DEVELOPER ARE USED IN WINDOWS GUI. CAUSE VSCODE PLUGIN AND EASER TASK WHILE HANDLING MERGE. 

GIT REBASE:

PRE-REQUESTS: git rebase is run as
feature_branch

DEFINITION:
	Merge the head(aka base) of feature_branch to master head(aka base). So it is known as rebase


Scenario:
	When we add some  feature in our code. 

Steps:
1. We add in our feature_branch. 

2. Add a feature in it as a new filename in the feature_branch,commit it as the new filename.

3. git rebase master (cmd executed from feature_branch)

output: First, rewinding head our replay your work in top of it(which means we have rewinded from master or changes in master).

4. git log - which shows the all commit of master branch and   our feature branch too.

5. git merge dev - cmd from master

-----------------------------------
GIT WORK-FLOW:

NOTE: 
	DEPENDS ON COMPANY AND PROJECT MIGHT BE DIFFER IN WORK-FLOW.WE SHOULD DEFINE OUR WORK-FLOW.

SCENARIO:
	IF WE ARE WANT TO WORK WITH GIT WE MIGHT HAVE GITHUB ACCOUNT.WITHOUT GITHUB, WE CAN PUSH TO REMOTE REPO by altering CONFIG USER.NAME & USER.EMAIL


WORK-FLOW STEPS:
-------------------
1. WE ARE FORKED OUR WORK FROM 
CLIENT GITHUB(OWNERSHIP OF THE 
GITHUB REPO SYMBOL -> A BOOK 
PRESENT IN REPO NAME) IN OUR 
COMPANY REMOTE REPO(OWNERSHIP PF 
THE GIHUB REPO SYMBOL -> FORKED).

2. WHEN NOOBIE DEVELOPER APPEARED 
IN OUR COMPANY, THEY WILL USE CLONE 
CMD FOR LOCAL REPO. IT HAS ALSO 
PRESENT IN .GIT FOLDER(Which means 
initiliazed git folder).

3. After the execution of (git 
clone github-link) cmd, do git log 
which shows the origin. 

4. git branch -a - which shows hidden branches that is remote repo.

5. git branch dev

6. git checkout dev

7. Made some changes and commit it.

8. git remote - which shows origin.cause we have been forked

9. git push origin dev - For tester and other developers to approve our code.

10. git log 

11. After the approved from tester to merge to master git checkout master 

12. git pull origin master - which update the lastest update from remote to local

13. git merge dev

14. Delete the feature branch in local repo after successfully merged.
	cmd: git branch -d dev

15. Delete the feature branch in remote repo.
	cmd:git push origin -d dev or git push origin --delete dev

16. Now then, we have only master flawlessly or cleanly :).

17. Finally we have requested to pull to the client for my 1 or 2 months work in standard release.

----------------------------------------------------

WORK FLOW STRATEGY MIND MAP(Important company-idea):

Step 1: CLIENT ->forked to company 

Step 2: COMPANY -> FORKED  repo -> clone/pull to master

Step 3: MASTER -> CLONE/PULL AND Do work on feature branch . AFTER THE WORK merge and PUSH TO MASTER.

Step 4 : Delete the feature branch after our work has been done in pur feature branch


-----------------------------------------------------

BASICS OF VERSIONS AND ENHANCEMENTS:

ENHANCEMENTS:
--------------------
V1.1
V1.2
.
. 
.V1.n
VERSIONS:
-------------------------
V2.0 - STANDARD RELEASE VERSION
V3.0
.
.
Vn.n
--------------------

CHEERYPICK CONCEPT:

Definition:

Merge only specific commit from an branch.

STEPS:

1. mkdir name and do git init

2. create a file and an branch, and do 3 commits in feature branch

3. we should know the commit id of commit what we want to merge into the master

4. Make sure swithed as master branch

5. git cherry-pick (commit-id)  

6. git log 

NOTE: WHATIF WE COMMIT THIRD RATHER THAN SECOND COMMIT TO THE MASTER BY CHERRYPICK?

ANSWER: NO , WE WON'T WE CAN DO ONLY SPECIFIC COMMIT IN HIERARCHICAL ORDER

----------------------------------------------------

GIT STASH(TEMPARAORY MEMORY SPACE LIKE STAGING OR INDEXING AREA):

SCENARIO:

IF I CODE IN 10 LINES . WITHOUT ADDING THE CONTENT INTO THE GIT. WE CAN'T  SWITCHING INTO ANOTHER.

SOLUTION:

TO AVOID THE ABOVE SCENARIO , WE CAN USE STASH CMD. 

CMD: 

1. git stash - To save our working dir into stash for switching to another branch.
2. git stash pop - resume to the working dir
  
-----------------------------------
GIT TAGS:

SCENARIO:

IF I FINISH THE WORK LIKE RELEASE THE WORK OF THE LAST COMMIT, WE SHOULD SPECIFY THE TAGS TO THE COMMIT AS V1.01.

MANY WAYS IN CMDS: 

1. git tag <tagname> / git tag -a v1.4

2. git tag -a v1.4 -m "my version 1.4"

3. git tag - TO LIST THE TAGS.

4 (Important). git tag -a v1.2 <commit-id>

-------------------------------------------------
TERMINOLOGY:-
1. ORIGIN - ORGINIAL OR STARTING POINT REMOTE REPO CONTENTS.
AKA MAXIMUM IT WOULD BE CLIENT REPO
-----------------------------
  

 
