Monitoring:
Act of Collecting regular data about systems. So Performance can be viewed and tracked.

-----------------------------------------------------------------------------------------------------------------
Goal of Monitoring: 

To Know when something goes wrong so it can be resolved before impacting users and business functions.

-----------------------------------------------------------------------------------------------------------------
3 Questions of monitoring:

1. Is our service online and available?

2. Is our service functioning correctly?

3. Is our service performing well?

If the answer to any of these 3 question is no - Telemetry data does.

-----------------------------------------------------------------------------------------------------------------


TWO INDUSTRY STANDARAD METRICS(Dev and Devops team's success is measured by how long it takes them to do this):

1. MEAN TIME TO DETECTION (MTTD) - Amount of time, on average, b/w the start of an issue and when teams become aware of it. This does not include time spent troubleshooting or fixing the issue.

2. MEAN TIME TO RESOLUTION (MTTR) - Average amount of time b/w when an issue is detected, and when systems are fixed and operating normally again. Ideally this includes both time spent fixing the issue and implementating proactive steps to prevent it form happening again.


-----------------------------------------------------------------------------------------------------------------

STANDRADIZED METHODS OF MONITORING:

1. RED Method(Request Driven) {Instrumenting the Service layer}:

  * Rate (Throughput) - Request per second AKA Application Rates.

  * Errors - Failed Request AKA Application errors.

  * Duration (Latency) - Transaction Response time AKA Application Transaction duration.

2. USE Method(Resource Driven) {Instrumenting the Infra layer}:

  * Utilisation - level of resource,use,as time or % (disk i/0 at 65% utilisation)

  * Saturation - Resource Expiry requests queue/drop (disk queue length) Zero=good

  * Erros - Failed operations (disk write error) Zero=good

3. Golden signals (RED + S) Google SRE HandBook {Instrumentating both Service and Infra Layers}

  "Measuring only metrics in user-facing system"

  * RED + S(Saturation - Resource at 100 %)

4. Core Web Vitals {Instrumenting the UI/UX layer or Customer experience layer}

  * Largest Contentful Paint (perceived page load)
  * First Input Delay (perceived responsiveness)
  * Cumulative Layout Shift (perceived stability)


Summary in Newrelic:

1. UI/UX Layer - Core Web Vitals - Newrelic Browser

2. Service Layer - RED + 4GS - Newrelic APM & Services

3. Infrastructure Layer - 4GS + USE - Newrelic Infrastructure

-----------------------------------------------------------------------------------------------------------------

Observability:

Limitations of monitoring:

"Monitoring requires teams to decide what to monitor in advance" - Monolithic - easier to predict - monitoring is enough

But Modern Systems - exponentially more potential failure points - eventhough engineering teams may not aware of. This makes it nearly impossoble to monitor all potentialissue.

Organizations that try to manage their systems with monitoring alone often find themselves attempting to manage TOOL SPRAWL (A Segmented srack of different monitoring tools in the same application, causing the manual correlation of data {Correlation - method to identify the dynamic value which needs manual effort.})


ENTERING OBSERVABILITY:

Modern  Companies need a flexible,scalable solution to provide holistic visibility of application performance across multiple services in one place. This comes in the form of "Observability".

It is practice of instrumenting systems to gather actionable data depicting not only when and where a issue occurred, but - more importantly - WHY IT OCCURRED.


-----------------------------------------------------------------------------------------------------------------

Diff b/w Montoring (when,where) and Observability(why):

Monitoring - verb - It can identify when something is wrong and where.
Observability - noun - Type of Approach that lets you ask why something is wrong. It provides the felxiblity to dig into "unknown unknowns" on the fly.


------------------------------------------------------------------------------------------------------------------

The first step in observability - To Know the Telemetry data


TELEMETRY DATA:

Tele - Remote
Metron - Measure

Which means Collecting data from data source or other data at remote endpoints.

MELT Data Types: (4 Essentials Telemetry Data  Types)

1. Metrics - Measuring of Aggregated Events. Example: Does my app have less errors this week compared to last?.

2. Events - Discrete action happening at a moment. Example: I need to see the specific attributes describing the last error. 

3. Log - Human readable Detailed events e.g What was the activity leading up to the last error?

4. Traces(Relation b/w events or Causal chain of Events) - App Components involved during request with a error e.g Why have our Customer experienced longer transaction times this week?.

-----------------------------------------------------------------------------------------------------------------
